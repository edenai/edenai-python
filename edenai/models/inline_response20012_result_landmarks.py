# coding: utf-8

"""
    Eden AI API Documentation

    <a href=\"https://app.edenai.run/user/login\" target=\"_blank\"><img src=\"/static/images/welcome.png\"></a>. # Welcome  Eden AI simplifies the use and integration of AI technologies by providing a unique API connected to the best AI engines and combined with a powerful management platform. The platform covers a wide range of AI technologies: * Vision:  <a href=\"https://www.edenai.co/vision\" target=\"_blank\">www.edenai.co/vision</a>. * Text & NLP: <a href=\"https://www.edenai.co/text\" target=\"_blank\">www.edenai.co/text</a>. * Speech & Audio: <a href=\"https://www.edenai.co/speech\" target=\"_blank\">www.edenai.co/speech</a>. * OCR: <a href=\"https://www.edenai.co/ocr\" target=\"_blank\">www.edenai.co/ocr</a>. * Machine Translation: <a href=\"https://www.edenai.co/translation\" target=\"_blank\">www.edenai.co/translation</a>. * Prediction: <a href=\"https://www.edenai.co/prediction\" target=\"_blank\">www.edenai.co/prediction</a>.  For all the proposed technologies, we provide a single endpoint:  the service provider is only a parameter that can be changed very easily. All the engines available on Eden AI are listed here: www.edenai.co/catalog  # Support & community  ### 1- Support If you have any problems, please contact us at this email address: contact@edenai.co. We will be happy to help you in the use of Eden AI.   ### 2- Community  You can interact personally with other people actively using and working with Eden AI and join our  <a href=\"https://join.slack.com/t/edenai/shared_invite/zt-t68c2pr9-4lDKQ_qEqmLiWNptQzB_6w\" target=\"_blank\">Slack community</a>.  We are always updating our docs, so a good way to always stay up to date is to watch our documentation repo on Github: <a href=\"https://github.com/edenai\" target=\"_blank\">https://github.com/edenai</a>.  ### 3- Blog  We also regularly publish various articles with Eden AI news and technical articles on the different AI engines that exist. You can find these articles here: <a href=\"https://www.edenai.co/blog\" target=\"_blank\">https://www.edenai.co/blog</a>.   # Authentication  ## Create account ![Register](/static/images/register.png)  To create an account, please go to this link: <a href=\"https://app.edenai.run/user/login\" target=\"_blank\">app.edenai.run/user/login</a>. You can create an account with your email address or by using your account on available platforms (Gmail, Github, etc.).   By creating an account with your email address, you will receive a confirmation email with a link to click. Check your spam if needed and contact us if you have any problem: contact@edenai.co  ![Login](/static/images/login.png) ## API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will have access to your API key to start using the different AI engines offered by Eden AI.   ![api_key](/static/images/api_key.png)  ## Sandbox API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will also have access to your **Sandbox** API key that will allow you to make free calls and get dummy responses in order to implement and debug Eden AI without consuming credits.   ![api_key](/static/images/sandbox_api_key.png)  # Portal Guide  Eden AI provides a web portal that allows you to do several tasks:  ![portal](/static/images/portal.png)  ### 1- Benchmark and test The platform allows you to easily compare competing engines without having to code. By uploading your data, you have access to the prediction results of the different engines. This gives you a first overview of the performance of AI engines.   ![benchmark](/static/images/benchmark.png)  ### 2- Cost management The <a href=\"https://app.edenai.run/admin/cost-management\" target=\"_blank\">cost management page</a> also allows you to centralize the costs associated with the different engines with various filters to simplify the analysis.   This page also allows you to define monthly budget limits not to be exceeded to secure the use of different AI engines.   ![cost-management](/static/images/cost_management.png) ### 3- Account The <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">account page</a> allows you to change your information and password. It also gives you access to your API key that you can renew if needed.   This page also allows you to add a credit card and to buy with credits to use all the engines offered by Eden AI.   ![account](/static/images/account.png)   # API Guide  Eden AI API has different endpoints that refer to different AI services. The connected providers are thus parameters that the user can easily change.   # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@edenai.co
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from edenai.configuration import Configuration


class InlineResponse20012ResultLandmarks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'left_eye': 'list[float]',
        'right_eye': 'list[float]',
        'left_of_left_eyebrow': 'list[float]',
        'right_of_left_eyebrow': 'list[float]',
        'left_of_right_eyebrow': 'list[float]',
        'right_of_right_eyebrow': 'list[float]',
        'midpoint_between_eyes': 'list[float]',
        'nose_tip': 'list[float]',
        'upper_lip': 'list[float]',
        'lower_lip': 'list[float]',
        'mouth_left': 'list[float]',
        'mouth_right': 'list[float]',
        'mouth_center': 'list[float]',
        'nose_bottom_right': 'list[float]',
        'nose_bottom_left': 'list[float]',
        'nose_bottom_center': 'list[float]',
        'left_eye_top_boundary': 'list[float]',
        'left_eye_right_corner': 'list[float]',
        'left_eye_bottom_boundary': 'list[float]',
        'left_eye_left_corner': 'list[float]',
        'right_eye_top_boundary': 'list[float]',
        'right_eye_right_corner': 'list[float]',
        'right_eye_bottom_boundary': 'list[float]',
        'right_eye_left_corner': 'list[float]',
        'left_eyebrow_upper_midpoint': 'list[float]',
        'right_eyebrow_upper_midpoint': 'list[float]',
        'left_ear_tragion': 'list[float]',
        'right_ear_tragion': 'list[float]',
        'forehead_glabella': 'list[float]',
        'chin_gnathion': 'list[float]',
        'chin_left_gonion': 'list[float]',
        'chin_right_gonion': 'list[float]',
        'left_cheek_center': 'list[float]',
        'right_cheek_center': 'list[float]'
    }

    attribute_map = {
        'left_eye': 'LEFT_EYE',
        'right_eye': 'RIGHT_EYE',
        'left_of_left_eyebrow': 'LEFT_OF_LEFT_EYEBROW',
        'right_of_left_eyebrow': 'RIGHT_OF_LEFT_EYEBROW',
        'left_of_right_eyebrow': 'LEFT_OF_RIGHT_EYEBROW',
        'right_of_right_eyebrow': 'RIGHT_OF_RIGHT_EYEBROW',
        'midpoint_between_eyes': 'MIDPOINT_BETWEEN_EYES',
        'nose_tip': 'NOSE_TIP',
        'upper_lip': 'UPPER_LIP',
        'lower_lip': 'LOWER_LIP',
        'mouth_left': 'MOUTH_LEFT',
        'mouth_right': 'MOUTH_RIGHT',
        'mouth_center': 'MOUTH_CENTER',
        'nose_bottom_right': 'NOSE_BOTTOM_RIGHT',
        'nose_bottom_left': 'NOSE_BOTTOM_LEFT',
        'nose_bottom_center': 'NOSE_BOTTOM_CENTER',
        'left_eye_top_boundary': 'LEFT_EYE_TOP_BOUNDARY',
        'left_eye_right_corner': 'LEFT_EYE_RIGHT_CORNER',
        'left_eye_bottom_boundary': 'LEFT_EYE_BOTTOM_BOUNDARY',
        'left_eye_left_corner': 'LEFT_EYE_LEFT_CORNER',
        'right_eye_top_boundary': 'RIGHT_EYE_TOP_BOUNDARY',
        'right_eye_right_corner': 'RIGHT_EYE_RIGHT_CORNER',
        'right_eye_bottom_boundary': 'RIGHT_EYE_BOTTOM_BOUNDARY',
        'right_eye_left_corner': 'RIGHT_EYE_LEFT_CORNER',
        'left_eyebrow_upper_midpoint': 'LEFT_EYEBROW_UPPER_MIDPOINT',
        'right_eyebrow_upper_midpoint': 'RIGHT_EYEBROW_UPPER_MIDPOINT',
        'left_ear_tragion': 'LEFT_EAR_TRAGION',
        'right_ear_tragion': 'RIGHT_EAR_TRAGION',
        'forehead_glabella': 'FOREHEAD_GLABELLA',
        'chin_gnathion': 'CHIN_GNATHION',
        'chin_left_gonion': 'CHIN_LEFT_GONION',
        'chin_right_gonion': 'CHIN_RIGHT_GONION',
        'left_cheek_center': 'LEFT_CHEEK_CENTER',
        'right_cheek_center': 'RIGHT_CHEEK_CENTER'
    }

    def __init__(self, left_eye=None, right_eye=None, left_of_left_eyebrow=None, right_of_left_eyebrow=None, left_of_right_eyebrow=None, right_of_right_eyebrow=None, midpoint_between_eyes=None, nose_tip=None, upper_lip=None, lower_lip=None, mouth_left=None, mouth_right=None, mouth_center=None, nose_bottom_right=None, nose_bottom_left=None, nose_bottom_center=None, left_eye_top_boundary=None, left_eye_right_corner=None, left_eye_bottom_boundary=None, left_eye_left_corner=None, right_eye_top_boundary=None, right_eye_right_corner=None, right_eye_bottom_boundary=None, right_eye_left_corner=None, left_eyebrow_upper_midpoint=None, right_eyebrow_upper_midpoint=None, left_ear_tragion=None, right_ear_tragion=None, forehead_glabella=None, chin_gnathion=None, chin_left_gonion=None, chin_right_gonion=None, left_cheek_center=None, right_cheek_center=None, _configuration=None):  # noqa: E501
        """InlineResponse20012ResultLandmarks - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._left_eye = None
        self._right_eye = None
        self._left_of_left_eyebrow = None
        self._right_of_left_eyebrow = None
        self._left_of_right_eyebrow = None
        self._right_of_right_eyebrow = None
        self._midpoint_between_eyes = None
        self._nose_tip = None
        self._upper_lip = None
        self._lower_lip = None
        self._mouth_left = None
        self._mouth_right = None
        self._mouth_center = None
        self._nose_bottom_right = None
        self._nose_bottom_left = None
        self._nose_bottom_center = None
        self._left_eye_top_boundary = None
        self._left_eye_right_corner = None
        self._left_eye_bottom_boundary = None
        self._left_eye_left_corner = None
        self._right_eye_top_boundary = None
        self._right_eye_right_corner = None
        self._right_eye_bottom_boundary = None
        self._right_eye_left_corner = None
        self._left_eyebrow_upper_midpoint = None
        self._right_eyebrow_upper_midpoint = None
        self._left_ear_tragion = None
        self._right_ear_tragion = None
        self._forehead_glabella = None
        self._chin_gnathion = None
        self._chin_left_gonion = None
        self._chin_right_gonion = None
        self._left_cheek_center = None
        self._right_cheek_center = None
        self.discriminator = None

        if left_eye is not None:
            self.left_eye = left_eye
        if right_eye is not None:
            self.right_eye = right_eye
        if left_of_left_eyebrow is not None:
            self.left_of_left_eyebrow = left_of_left_eyebrow
        if right_of_left_eyebrow is not None:
            self.right_of_left_eyebrow = right_of_left_eyebrow
        if left_of_right_eyebrow is not None:
            self.left_of_right_eyebrow = left_of_right_eyebrow
        if right_of_right_eyebrow is not None:
            self.right_of_right_eyebrow = right_of_right_eyebrow
        if midpoint_between_eyes is not None:
            self.midpoint_between_eyes = midpoint_between_eyes
        if nose_tip is not None:
            self.nose_tip = nose_tip
        if upper_lip is not None:
            self.upper_lip = upper_lip
        if lower_lip is not None:
            self.lower_lip = lower_lip
        if mouth_left is not None:
            self.mouth_left = mouth_left
        if mouth_right is not None:
            self.mouth_right = mouth_right
        if mouth_center is not None:
            self.mouth_center = mouth_center
        if nose_bottom_right is not None:
            self.nose_bottom_right = nose_bottom_right
        if nose_bottom_left is not None:
            self.nose_bottom_left = nose_bottom_left
        if nose_bottom_center is not None:
            self.nose_bottom_center = nose_bottom_center
        if left_eye_top_boundary is not None:
            self.left_eye_top_boundary = left_eye_top_boundary
        if left_eye_right_corner is not None:
            self.left_eye_right_corner = left_eye_right_corner
        if left_eye_bottom_boundary is not None:
            self.left_eye_bottom_boundary = left_eye_bottom_boundary
        if left_eye_left_corner is not None:
            self.left_eye_left_corner = left_eye_left_corner
        if right_eye_top_boundary is not None:
            self.right_eye_top_boundary = right_eye_top_boundary
        if right_eye_right_corner is not None:
            self.right_eye_right_corner = right_eye_right_corner
        if right_eye_bottom_boundary is not None:
            self.right_eye_bottom_boundary = right_eye_bottom_boundary
        if right_eye_left_corner is not None:
            self.right_eye_left_corner = right_eye_left_corner
        if left_eyebrow_upper_midpoint is not None:
            self.left_eyebrow_upper_midpoint = left_eyebrow_upper_midpoint
        if right_eyebrow_upper_midpoint is not None:
            self.right_eyebrow_upper_midpoint = right_eyebrow_upper_midpoint
        if left_ear_tragion is not None:
            self.left_ear_tragion = left_ear_tragion
        if right_ear_tragion is not None:
            self.right_ear_tragion = right_ear_tragion
        if forehead_glabella is not None:
            self.forehead_glabella = forehead_glabella
        if chin_gnathion is not None:
            self.chin_gnathion = chin_gnathion
        if chin_left_gonion is not None:
            self.chin_left_gonion = chin_left_gonion
        if chin_right_gonion is not None:
            self.chin_right_gonion = chin_right_gonion
        if left_cheek_center is not None:
            self.left_cheek_center = left_cheek_center
        if right_cheek_center is not None:
            self.right_cheek_center = right_cheek_center

    @property
    def left_eye(self):
        """Gets the left_eye of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_eye of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_eye

    @left_eye.setter
    def left_eye(self, left_eye):
        """Sets the left_eye of this InlineResponse20012ResultLandmarks.


        :param left_eye: The left_eye of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_eye = left_eye

    @property
    def right_eye(self):
        """Gets the right_eye of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_eye of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_eye

    @right_eye.setter
    def right_eye(self, right_eye):
        """Sets the right_eye of this InlineResponse20012ResultLandmarks.


        :param right_eye: The right_eye of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_eye = right_eye

    @property
    def left_of_left_eyebrow(self):
        """Gets the left_of_left_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_of_left_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_of_left_eyebrow

    @left_of_left_eyebrow.setter
    def left_of_left_eyebrow(self, left_of_left_eyebrow):
        """Sets the left_of_left_eyebrow of this InlineResponse20012ResultLandmarks.


        :param left_of_left_eyebrow: The left_of_left_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_of_left_eyebrow = left_of_left_eyebrow

    @property
    def right_of_left_eyebrow(self):
        """Gets the right_of_left_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_of_left_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_of_left_eyebrow

    @right_of_left_eyebrow.setter
    def right_of_left_eyebrow(self, right_of_left_eyebrow):
        """Sets the right_of_left_eyebrow of this InlineResponse20012ResultLandmarks.


        :param right_of_left_eyebrow: The right_of_left_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_of_left_eyebrow = right_of_left_eyebrow

    @property
    def left_of_right_eyebrow(self):
        """Gets the left_of_right_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_of_right_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_of_right_eyebrow

    @left_of_right_eyebrow.setter
    def left_of_right_eyebrow(self, left_of_right_eyebrow):
        """Sets the left_of_right_eyebrow of this InlineResponse20012ResultLandmarks.


        :param left_of_right_eyebrow: The left_of_right_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_of_right_eyebrow = left_of_right_eyebrow

    @property
    def right_of_right_eyebrow(self):
        """Gets the right_of_right_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_of_right_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_of_right_eyebrow

    @right_of_right_eyebrow.setter
    def right_of_right_eyebrow(self, right_of_right_eyebrow):
        """Sets the right_of_right_eyebrow of this InlineResponse20012ResultLandmarks.


        :param right_of_right_eyebrow: The right_of_right_eyebrow of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_of_right_eyebrow = right_of_right_eyebrow

    @property
    def midpoint_between_eyes(self):
        """Gets the midpoint_between_eyes of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The midpoint_between_eyes of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._midpoint_between_eyes

    @midpoint_between_eyes.setter
    def midpoint_between_eyes(self, midpoint_between_eyes):
        """Sets the midpoint_between_eyes of this InlineResponse20012ResultLandmarks.


        :param midpoint_between_eyes: The midpoint_between_eyes of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._midpoint_between_eyes = midpoint_between_eyes

    @property
    def nose_tip(self):
        """Gets the nose_tip of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The nose_tip of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._nose_tip

    @nose_tip.setter
    def nose_tip(self, nose_tip):
        """Sets the nose_tip of this InlineResponse20012ResultLandmarks.


        :param nose_tip: The nose_tip of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._nose_tip = nose_tip

    @property
    def upper_lip(self):
        """Gets the upper_lip of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The upper_lip of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._upper_lip

    @upper_lip.setter
    def upper_lip(self, upper_lip):
        """Sets the upper_lip of this InlineResponse20012ResultLandmarks.


        :param upper_lip: The upper_lip of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._upper_lip = upper_lip

    @property
    def lower_lip(self):
        """Gets the lower_lip of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The lower_lip of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._lower_lip

    @lower_lip.setter
    def lower_lip(self, lower_lip):
        """Sets the lower_lip of this InlineResponse20012ResultLandmarks.


        :param lower_lip: The lower_lip of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._lower_lip = lower_lip

    @property
    def mouth_left(self):
        """Gets the mouth_left of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The mouth_left of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._mouth_left

    @mouth_left.setter
    def mouth_left(self, mouth_left):
        """Sets the mouth_left of this InlineResponse20012ResultLandmarks.


        :param mouth_left: The mouth_left of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._mouth_left = mouth_left

    @property
    def mouth_right(self):
        """Gets the mouth_right of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The mouth_right of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._mouth_right

    @mouth_right.setter
    def mouth_right(self, mouth_right):
        """Sets the mouth_right of this InlineResponse20012ResultLandmarks.


        :param mouth_right: The mouth_right of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._mouth_right = mouth_right

    @property
    def mouth_center(self):
        """Gets the mouth_center of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The mouth_center of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._mouth_center

    @mouth_center.setter
    def mouth_center(self, mouth_center):
        """Sets the mouth_center of this InlineResponse20012ResultLandmarks.


        :param mouth_center: The mouth_center of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._mouth_center = mouth_center

    @property
    def nose_bottom_right(self):
        """Gets the nose_bottom_right of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The nose_bottom_right of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._nose_bottom_right

    @nose_bottom_right.setter
    def nose_bottom_right(self, nose_bottom_right):
        """Sets the nose_bottom_right of this InlineResponse20012ResultLandmarks.


        :param nose_bottom_right: The nose_bottom_right of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._nose_bottom_right = nose_bottom_right

    @property
    def nose_bottom_left(self):
        """Gets the nose_bottom_left of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The nose_bottom_left of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._nose_bottom_left

    @nose_bottom_left.setter
    def nose_bottom_left(self, nose_bottom_left):
        """Sets the nose_bottom_left of this InlineResponse20012ResultLandmarks.


        :param nose_bottom_left: The nose_bottom_left of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._nose_bottom_left = nose_bottom_left

    @property
    def nose_bottom_center(self):
        """Gets the nose_bottom_center of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The nose_bottom_center of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._nose_bottom_center

    @nose_bottom_center.setter
    def nose_bottom_center(self, nose_bottom_center):
        """Sets the nose_bottom_center of this InlineResponse20012ResultLandmarks.


        :param nose_bottom_center: The nose_bottom_center of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._nose_bottom_center = nose_bottom_center

    @property
    def left_eye_top_boundary(self):
        """Gets the left_eye_top_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_eye_top_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_eye_top_boundary

    @left_eye_top_boundary.setter
    def left_eye_top_boundary(self, left_eye_top_boundary):
        """Sets the left_eye_top_boundary of this InlineResponse20012ResultLandmarks.


        :param left_eye_top_boundary: The left_eye_top_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_eye_top_boundary = left_eye_top_boundary

    @property
    def left_eye_right_corner(self):
        """Gets the left_eye_right_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_eye_right_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_eye_right_corner

    @left_eye_right_corner.setter
    def left_eye_right_corner(self, left_eye_right_corner):
        """Sets the left_eye_right_corner of this InlineResponse20012ResultLandmarks.


        :param left_eye_right_corner: The left_eye_right_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_eye_right_corner = left_eye_right_corner

    @property
    def left_eye_bottom_boundary(self):
        """Gets the left_eye_bottom_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_eye_bottom_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_eye_bottom_boundary

    @left_eye_bottom_boundary.setter
    def left_eye_bottom_boundary(self, left_eye_bottom_boundary):
        """Sets the left_eye_bottom_boundary of this InlineResponse20012ResultLandmarks.


        :param left_eye_bottom_boundary: The left_eye_bottom_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_eye_bottom_boundary = left_eye_bottom_boundary

    @property
    def left_eye_left_corner(self):
        """Gets the left_eye_left_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_eye_left_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_eye_left_corner

    @left_eye_left_corner.setter
    def left_eye_left_corner(self, left_eye_left_corner):
        """Sets the left_eye_left_corner of this InlineResponse20012ResultLandmarks.


        :param left_eye_left_corner: The left_eye_left_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_eye_left_corner = left_eye_left_corner

    @property
    def right_eye_top_boundary(self):
        """Gets the right_eye_top_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_eye_top_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_eye_top_boundary

    @right_eye_top_boundary.setter
    def right_eye_top_boundary(self, right_eye_top_boundary):
        """Sets the right_eye_top_boundary of this InlineResponse20012ResultLandmarks.


        :param right_eye_top_boundary: The right_eye_top_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_eye_top_boundary = right_eye_top_boundary

    @property
    def right_eye_right_corner(self):
        """Gets the right_eye_right_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_eye_right_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_eye_right_corner

    @right_eye_right_corner.setter
    def right_eye_right_corner(self, right_eye_right_corner):
        """Sets the right_eye_right_corner of this InlineResponse20012ResultLandmarks.


        :param right_eye_right_corner: The right_eye_right_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_eye_right_corner = right_eye_right_corner

    @property
    def right_eye_bottom_boundary(self):
        """Gets the right_eye_bottom_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_eye_bottom_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_eye_bottom_boundary

    @right_eye_bottom_boundary.setter
    def right_eye_bottom_boundary(self, right_eye_bottom_boundary):
        """Sets the right_eye_bottom_boundary of this InlineResponse20012ResultLandmarks.


        :param right_eye_bottom_boundary: The right_eye_bottom_boundary of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_eye_bottom_boundary = right_eye_bottom_boundary

    @property
    def right_eye_left_corner(self):
        """Gets the right_eye_left_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_eye_left_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_eye_left_corner

    @right_eye_left_corner.setter
    def right_eye_left_corner(self, right_eye_left_corner):
        """Sets the right_eye_left_corner of this InlineResponse20012ResultLandmarks.


        :param right_eye_left_corner: The right_eye_left_corner of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_eye_left_corner = right_eye_left_corner

    @property
    def left_eyebrow_upper_midpoint(self):
        """Gets the left_eyebrow_upper_midpoint of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_eyebrow_upper_midpoint of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_eyebrow_upper_midpoint

    @left_eyebrow_upper_midpoint.setter
    def left_eyebrow_upper_midpoint(self, left_eyebrow_upper_midpoint):
        """Sets the left_eyebrow_upper_midpoint of this InlineResponse20012ResultLandmarks.


        :param left_eyebrow_upper_midpoint: The left_eyebrow_upper_midpoint of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_eyebrow_upper_midpoint = left_eyebrow_upper_midpoint

    @property
    def right_eyebrow_upper_midpoint(self):
        """Gets the right_eyebrow_upper_midpoint of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_eyebrow_upper_midpoint of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_eyebrow_upper_midpoint

    @right_eyebrow_upper_midpoint.setter
    def right_eyebrow_upper_midpoint(self, right_eyebrow_upper_midpoint):
        """Sets the right_eyebrow_upper_midpoint of this InlineResponse20012ResultLandmarks.


        :param right_eyebrow_upper_midpoint: The right_eyebrow_upper_midpoint of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_eyebrow_upper_midpoint = right_eyebrow_upper_midpoint

    @property
    def left_ear_tragion(self):
        """Gets the left_ear_tragion of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_ear_tragion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_ear_tragion

    @left_ear_tragion.setter
    def left_ear_tragion(self, left_ear_tragion):
        """Sets the left_ear_tragion of this InlineResponse20012ResultLandmarks.


        :param left_ear_tragion: The left_ear_tragion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_ear_tragion = left_ear_tragion

    @property
    def right_ear_tragion(self):
        """Gets the right_ear_tragion of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_ear_tragion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_ear_tragion

    @right_ear_tragion.setter
    def right_ear_tragion(self, right_ear_tragion):
        """Sets the right_ear_tragion of this InlineResponse20012ResultLandmarks.


        :param right_ear_tragion: The right_ear_tragion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_ear_tragion = right_ear_tragion

    @property
    def forehead_glabella(self):
        """Gets the forehead_glabella of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The forehead_glabella of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._forehead_glabella

    @forehead_glabella.setter
    def forehead_glabella(self, forehead_glabella):
        """Sets the forehead_glabella of this InlineResponse20012ResultLandmarks.


        :param forehead_glabella: The forehead_glabella of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._forehead_glabella = forehead_glabella

    @property
    def chin_gnathion(self):
        """Gets the chin_gnathion of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The chin_gnathion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._chin_gnathion

    @chin_gnathion.setter
    def chin_gnathion(self, chin_gnathion):
        """Sets the chin_gnathion of this InlineResponse20012ResultLandmarks.


        :param chin_gnathion: The chin_gnathion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._chin_gnathion = chin_gnathion

    @property
    def chin_left_gonion(self):
        """Gets the chin_left_gonion of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The chin_left_gonion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._chin_left_gonion

    @chin_left_gonion.setter
    def chin_left_gonion(self, chin_left_gonion):
        """Sets the chin_left_gonion of this InlineResponse20012ResultLandmarks.


        :param chin_left_gonion: The chin_left_gonion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._chin_left_gonion = chin_left_gonion

    @property
    def chin_right_gonion(self):
        """Gets the chin_right_gonion of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The chin_right_gonion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._chin_right_gonion

    @chin_right_gonion.setter
    def chin_right_gonion(self, chin_right_gonion):
        """Sets the chin_right_gonion of this InlineResponse20012ResultLandmarks.


        :param chin_right_gonion: The chin_right_gonion of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._chin_right_gonion = chin_right_gonion

    @property
    def left_cheek_center(self):
        """Gets the left_cheek_center of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The left_cheek_center of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._left_cheek_center

    @left_cheek_center.setter
    def left_cheek_center(self, left_cheek_center):
        """Sets the left_cheek_center of this InlineResponse20012ResultLandmarks.


        :param left_cheek_center: The left_cheek_center of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._left_cheek_center = left_cheek_center

    @property
    def right_cheek_center(self):
        """Gets the right_cheek_center of this InlineResponse20012ResultLandmarks.  # noqa: E501


        :return: The right_cheek_center of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :rtype: list[float]
        """
        return self._right_cheek_center

    @right_cheek_center.setter
    def right_cheek_center(self, right_cheek_center):
        """Sets the right_cheek_center of this InlineResponse20012ResultLandmarks.


        :param right_cheek_center: The right_cheek_center of this InlineResponse20012ResultLandmarks.  # noqa: E501
        :type: list[float]
        """

        self._right_cheek_center = right_cheek_center

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20012ResultLandmarks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012ResultLandmarks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20012ResultLandmarks):
            return True

        return self.to_dict() != other.to_dict()
